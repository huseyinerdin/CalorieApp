// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DietContext))]
    partial class DietContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Concrete.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 16, 15, 38, 3, 578, DateTimeKind.Local).AddTicks(6916));

                    b.Property<int>("MealTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 16, 15, 38, 3, 578, DateTimeKind.Local).AddTicks(7375));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("MealTypeID");

                    b.HasIndex("UserName");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("Entities.Concrete.MealDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("Gram")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int>("MealID")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealID");

                    b.HasIndex("ProductId");

                    b.ToTable("MealDetail");
                });

            modelBuilder.Entity("Entities.Concrete.MealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("MealType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Kahvaltı"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Ara Öğün"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Öğle Yemeği"
                        },
                        new
                        {
                            Id = 4,
                            TypeName = "Akşam Yemeği"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 16, 15, 38, 3, 579, DateTimeKind.Local).AddTicks(6261));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ProductTypeID")
                        .HasColumnType("int");

                    b.Property<double?>("UnitCalorie")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 16, 15, 38, 3, 579, DateTimeKind.Local).AddTicks(6629));

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Entities.Concrete.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductTypeName = "Et"
                        },
                        new
                        {
                            Id = 2,
                            ProductTypeName = "Balık"
                        },
                        new
                        {
                            Id = 3,
                            ProductTypeName = "Temel Gıda"
                        },
                        new
                        {
                            Id = 4,
                            ProductTypeName = "Sebze"
                        },
                        new
                        {
                            Id = 5,
                            ProductTypeName = "Meyve"
                        },
                        new
                        {
                            Id = 6,
                            ProductTypeName = "Lokanta Yemeği"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(350)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<DateTime?>("RegisterTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 16, 15, 38, 3, 579, DateTimeKind.Local).AddTicks(9382));

                    b.Property<int>("UserClaim")
                        .HasColumnType("int");

                    b.HasKey("UserName");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserName = "admin",
                            BirthDate = new DateTime(2023, 5, 16, 15, 38, 3, 580, DateTimeKind.Local).AddTicks(809),
                            PasswordHash = new byte[] { 140, 105, 118, 229, 181, 65, 4, 21, 189, 233, 8, 189, 77, 238, 21, 223, 177, 103, 169, 200, 115, 252, 75, 184, 168, 31, 111, 42, 180, 72, 169, 24 },
                            UserClaim = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Meal", b =>
                {
                    b.HasOne("Entities.Concrete.MealType", "MealType")
                        .WithMany("Meals")
                        .HasForeignKey("MealTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MealType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.MealDetail", b =>
                {
                    b.HasOne("Entities.Concrete.Meal", "Meal")
                        .WithMany("MealDetails")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("MealDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.HasOne("Entities.Concrete.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Entities.Concrete.Meal", b =>
                {
                    b.Navigation("MealDetails");
                });

            modelBuilder.Entity("Entities.Concrete.MealType", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Navigation("MealDetails");
                });

            modelBuilder.Entity("Entities.Concrete.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Navigation("Meals");
                });
#pragma warning restore 612, 618
        }
    }
}
